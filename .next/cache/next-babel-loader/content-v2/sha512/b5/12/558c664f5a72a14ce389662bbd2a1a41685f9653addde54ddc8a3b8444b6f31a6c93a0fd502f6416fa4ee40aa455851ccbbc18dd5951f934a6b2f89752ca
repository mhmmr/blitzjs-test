{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nexport const FORM_ERROR = \"FORM_ERROR\";\nexport function Form(_ref) {\n  let {\n    children,\n    submitText,\n    schema,\n    initialValues,\n    onSubmit\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"submitText\", \"schema\", \"initialValues\", \"onSubmit\"]);\n\n  const ctx = useForm({\n    mode: \"onBlur\",\n    resolver: async values => {\n      try {\n        if (schema) {\n          schema.parse(values);\n        }\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (error) {\n        var _error$formErrors;\n\n        return {\n          values: {},\n          errors: (_error$formErrors = error.formErrors) === null || _error$formErrors === void 0 ? void 0 : _error$formErrors.fieldErrors\n        };\n      }\n    },\n    defaultValues: initialValues\n  });\n  const {\n    0: formError,\n    1: setFormError\n  } = useState(null);\n  return __jsx(FormProvider, ctx, __jsx(\"form\", _extends({\n    onSubmit: ctx.handleSubmit(async values => {\n      const result = (await onSubmit(values)) || {};\n\n      for (const [key, value] of Object.entries(result)) {\n        if (key === FORM_ERROR) {\n          setFormError(value);\n        } else {\n          ctx.setError(key, {\n            type: \"submit\",\n            message: value\n          });\n        }\n      }\n    })\n  }, props, {\n    className: \"jsx-50508738\" + \" \" + (props && props.className != null && props.className || \"form\")\n  }), children, formError && __jsx(\"div\", {\n    role: \"alert\",\n    style: {\n      color: \"red\"\n    },\n    className: \"jsx-50508738\"\n  }, formError), submitText && __jsx(\"button\", {\n    type: \"submit\",\n    disabled: ctx.formState.isSubmitting,\n    className: \"jsx-50508738\"\n  }, submitText), __jsx(_JSXStyle, {\n    id: \"50508738\"\n  }, [\".form>*+*{margin-top:1rem;}\"])));\n}\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}