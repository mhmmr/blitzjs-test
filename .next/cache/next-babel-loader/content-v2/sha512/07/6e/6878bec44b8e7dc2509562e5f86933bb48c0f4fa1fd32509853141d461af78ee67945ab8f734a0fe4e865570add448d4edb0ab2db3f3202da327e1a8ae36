{"ast":null,"code":"import { NotFoundError, SecurePassword, resolver } from \"blitz\";\nimport db from \"db\";\nimport { authenticateUser } from \"app/auth/mutations/login\";\nimport { ChangePassword } from \"app/auth/validations\";\nexport default resolver.pipe(resolver.zod(ChangePassword), resolver.authorize(), async ({\n  currentPassword,\n  newPassword\n}, ctx) => {\n  const user = await db.user.findFirst({\n    where: {\n      id: ctx.session.userId\n    }\n  });\n  if (!user) throw new NotFoundError();\n  await authenticateUser(user.email, currentPassword);\n  const hashedPassword = await SecurePassword.hash(newPassword);\n  await db.user.update({\n    where: {\n      id: user.id\n    },\n    data: {\n      hashedPassword\n    }\n  });\n  return true;\n});","map":null,"metadata":{},"sourceType":"module"}